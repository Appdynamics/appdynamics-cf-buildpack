// Automatically generated by MockGen. DO NOT EDIT!
// Source: supply.go

package supply_test

import (
	libbuildpack "github.com/cloudfoundry/libbuildpack"
	gomock "github.com/golang/mock/gomock"
	exec "os/exec"
)

// Mock of Stager interface
type MockStager struct {
	ctrl     *gomock.Controller
	recorder *_MockStagerRecorder
}

// Recorder for MockStager (not exported)
type _MockStagerRecorder struct {
	mock *MockStager
}

func NewMockStager(ctrl *gomock.Controller) *MockStager {
	mock := &MockStager{ctrl: ctrl}
	mock.recorder = &_MockStagerRecorder{mock}
	return mock
}

func (_m *MockStager) EXPECT() *_MockStagerRecorder {
	return _m.recorder
}

func (_m *MockStager) BuildDir() string {
	ret := _m.ctrl.Call(_m, "BuildDir")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagerRecorder) BuildDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BuildDir")
}

func (_m *MockStager) CacheDir() string {
	ret := _m.ctrl.Call(_m, "CacheDir")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagerRecorder) CacheDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CacheDir")
}

func (_m *MockStager) DepDir() string {
	ret := _m.ctrl.Call(_m, "DepDir")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockStagerRecorder) DepDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DepDir")
}

func (_m *MockStager) LinkDirectoryInDepDir(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "LinkDirectoryInDepDir", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockStagerRecorder) LinkDirectoryInDepDir(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LinkDirectoryInDepDir", arg0, arg1)
}

// Mock of Manifest interface
type MockManifest struct {
	ctrl     *gomock.Controller
	recorder *_MockManifestRecorder
}

// Recorder for MockManifest (not exported)
type _MockManifestRecorder struct {
	mock *MockManifest
}

func NewMockManifest(ctrl *gomock.Controller) *MockManifest {
	mock := &MockManifest{ctrl: ctrl}
	mock.recorder = &_MockManifestRecorder{mock}
	return mock
}

func (_m *MockManifest) EXPECT() *_MockManifestRecorder {
	return _m.recorder
}

func (_m *MockManifest) RootDir() string {
	ret := _m.ctrl.Call(_m, "RootDir")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockManifestRecorder) RootDir() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RootDir")
}

func (_m *MockManifest) AllDependencyVersions(_param0 string) []string {
	ret := _m.ctrl.Call(_m, "AllDependencyVersions", _param0)
	ret0, _ := ret[0].([]string)
	return ret0
}

func (_mr *_MockManifestRecorder) AllDependencyVersions(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AllDependencyVersions", arg0)
}

func (_m *MockManifest) InstallDependency(_param0 libbuildpack.Dependency, _param1 string) error {
	ret := _m.ctrl.Call(_m, "InstallDependency", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManifestRecorder) InstallDependency(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstallDependency", arg0, arg1)
}

func (_m *MockManifest) InstallOnlyVersion(_param0 string, _param1 string) error {
	ret := _m.ctrl.Call(_m, "InstallOnlyVersion", _param0, _param1)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockManifestRecorder) InstallOnlyVersion(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "InstallOnlyVersion", arg0, arg1)
}

// Mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *_MockCommandRecorder
}

// Recorder for MockCommand (not exported)
type _MockCommandRecorder struct {
	mock *MockCommand
}

func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &_MockCommandRecorder{mock}
	return mock
}

func (_m *MockCommand) EXPECT() *_MockCommandRecorder {
	return _m.recorder
}

func (_m *MockCommand) Output(dir string, program string, args ...string) (string, error) {
	_s := []interface{}{dir, program}
	for _, _x := range args {
		_s = append(_s, _x)
	}
	ret := _m.ctrl.Call(_m, "Output", _s...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockCommandRecorder) Output(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	_s := append([]interface{}{arg0, arg1}, arg2...)
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Output", _s...)
}

func (_m *MockCommand) Run(cmd *exec.Cmd) error {
	ret := _m.ctrl.Call(_m, "Run", cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockCommandRecorder) Run(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Run", arg0)
}
